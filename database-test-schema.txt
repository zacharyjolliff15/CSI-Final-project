use largesampledb;
CREATE TABLE IF NOT EXISTS departments (
    department_id INT AUTO_INCREMENT PRIMARY KEY,
    department_name VARCHAR(100) NOT NULL
);
CREATE TABLE IF NOT EXISTS employees (
    employee_id INT AUTO_INCREMENT PRIMARY KEY,
    first_name VARCHAR(50) NOT NULL,
    last_name VARCHAR(50) NOT NULL,
    department_id INT NOT NULL,
    email VARCHAR(100) NOT NULL,
    phone VARCHAR(20),
    hire_date DATE NOT NULL,
    salary DECIMAL(10,2),
    CONSTRAINT fk_employees_departments
        FOREIGN KEY (department_id)
        REFERENCES departments(department_id)
);
CREATE TABLE IF NOT EXISTS projects (
    project_id INT AUTO_INCREMENT PRIMARY KEY,
    project_name VARCHAR(100) NOT NULL,
    department_id INT NOT NULL,
    start_date DATE,
    end_date DATE,
    budget DECIMAL(12,2),
    CONSTRAINT fk_projects_departments
        FOREIGN KEY (department_id)
        REFERENCES departments(department_id)
);
CREATE TABLE IF NOT EXISTS tasks (
    task_id INT AUTO_INCREMENT PRIMARY KEY,
    task_name VARCHAR(200) NOT NULL,
    assigned_to INT NOT NULL,
    project_id INT NOT NULL,
    start_date DATE,
    due_date DATE,
    status VARCHAR(20) DEFAULT 'Pending',
    CONSTRAINT fk_tasks_employees
        FOREIGN KEY (assigned_to)
        REFERENCES employees(employee_id),
    CONSTRAINT fk_tasks_projects
        FOREIGN KEY (project_id)
        REFERENCES projects(project_id)
);
CREATE TABLE IF NOT EXISTS customers (
    customer_id INT AUTO_INCREMENT PRIMARY KEY,
    first_name VARCHAR(50) NOT NULL,
    last_name VARCHAR(50) NOT NULL,
    email VARCHAR(100),
    phone VARCHAR(20),
    address VARCHAR(200),
    city VARCHAR(100),
    state VARCHAR(100),
    postal_code VARCHAR(20),
    country VARCHAR(100)
);
CREATE TABLE IF NOT EXISTS products (
    product_id INT AUTO_INCREMENT PRIMARY KEY,
    product_name VARCHAR(100) NOT NULL,
    product_description VARCHAR(255),
    list_price DECIMAL(10,2) NOT NULL,
    stock_quantity INT NOT NULL
);
CREATE TABLE IF NOT EXISTS orders (
    order_id INT AUTO_INCREMENT PRIMARY KEY,
    customer_id INT NOT NULL,
    employee_id INT NOT NULL,
    order_date DATE NOT NULL,
    status VARCHAR(20) DEFAULT 'Processing',
    total_amount DECIMAL(10,2) DEFAULT 0,
    CONSTRAINT fk_orders_customers
        FOREIGN KEY (customer_id)
        REFERENCES customers(customer_id),
    CONSTRAINT fk_orders_employees
        FOREIGN KEY (employee_id)
        REFERENCES employees(employee_id)
);
CREATE TABLE IF NOT EXISTS order_items (
    order_id INT NOT NULL,
    product_id INT NOT NULL,
    quantity INT NOT NULL,
    unit_price DECIMAL(10,2) NOT NULL,
    PRIMARY KEY (order_id, product_id),
    CONSTRAINT fk_order_items_orders
        FOREIGN KEY (order_id)
        REFERENCES orders(order_id),
    CONSTRAINT fk_order_items_products
        FOREIGN KEY (product_id)
        REFERENCES products(product_id)
);
INSERT INTO departments (department_name)
VALUES 
    ('Human Resources'),
    ('Finance'),
    ('Engineering'),
    ('Sales'),
    ('Marketing');
INSERT INTO employees 
    (first_name, last_name, department_id, email, phone, hire_date, salary)
VALUES
    ('John', 'Doe', 1, 'john.doe@example.com', '555-1111', '2020-01-15', 60000),
    ('Jane', 'Smith', 2, 'jane.smith@example.com', '555-2222', '2019-03-10', 75000),
    ('Robert', 'Brown', 3, 'robert.brown@example.com', '555-3333', '2021-06-01', 80000),
    ('Emily', 'Davis', 4, 'emily.davis@example.com', '555-4444', '2018-09-23', 50000),
    ('Michael', 'Wilson', 5, 'michael.wilson@example.com', '555-5555', '2020-11-11', 65000),
    ('Susan', 'Clark', 4, 'susan.clark@example.com', '555-6666', '2017-07-07', 53000);
INSERT INTO projects
    (project_name, department_id, start_date, end_date, budget)
VALUES
    ('Website Redesign', 3, '2021-07-01', '2022-01-15', 20000),
    ('Mobile App Launch', 3, '2022-02-01', '2022-10-31', 50000),
    ('New HR Portal', 1, '2022-03-15', '2022-06-30', 15000),
    ('Accounting System Upgrade', 2, '2021-12-01', '2022-12-31', 80000);
INSERT INTO tasks
    (task_name, assigned_to, project_id, start_date, due_date, status)
VALUES
    ('Create Wireframes', 3, 1, '2021-07-05', '2021-07-20', 'Completed'),
    ('Implement Frontend', 3, 1, '2021-07-21', '2021-08-15', 'Completed'),
    ('QA Testing', 3, 1, '2021-08-16', '2021-09-01', 'In Progress'),
    ('Create Mobile API', 3, 2, '2022-02-05', '2022-05-01', 'Pending'),
    ('Design HR Portal UI', 1, 3, '2022-03-20', '2022-04-15', 'In Progress'),
    ('Setup Accounting DB', 2, 4, '2022-01-05', '2022-04-30', 'In Progress');
INSERT INTO customers
    (first_name, last_name, email, phone, address, city, state, postal_code, country)
VALUES
    ('Alice', 'Johnson', 'alice.johnson@example.com', '555-7777', '123 Apple St', 'New York', 'NY', '10001', 'USA'),
    ('Bob', 'Anderson', 'bob.anderson@example.com', '555-8888', '456 Orange Ave', 'Los Angeles', 'CA', '90001', 'USA'),
    ('Charlie', 'Harris', 'charlie.harris@example.com', '555-9999', '789 Banana Blvd', 'Chicago', 'IL', '60601', 'USA'),
    ('Daisy', 'Miller', 'daisy.miller@example.com', '555-1010', '101 Grape Rd', 'Houston', 'TX', '77001', 'USA');
INSERT INTO products
    (product_name, product_description, list_price, stock_quantity)
VALUES
    ('Laptop Model A', '14-inch screen, 8GB RAM, 256GB SSD', 799.99, 50),
    ('Laptop Model B', '15-inch screen, 16GB RAM, 512GB SSD', 1199.99, 30),
    ('Smartphone X', '6-inch display, 128GB storage', 699.99, 80),
    ('Smartphone Y', '5-inch display, 64GB storage', 499.99, 100),
    ('Wireless Mouse', 'Bluetooth mouse with ergonomic design', 29.99, 200),
    ('USB-C Adapter', 'USB-C to USB-A adapter', 9.99, 300);
INSERT INTO orders
    (customer_id, employee_id, order_date, status, total_amount)
VALUES
    (1, 4, '2022-04-10', 'Shipped', 0),
    (2, 4, '2022-04-11', 'Processing', 0),
    (3, 4, '2022-04-12', 'Processing', 0),
    (4, 6, '2022-04-13', 'Pending', 0);
INSERT INTO order_items
    (order_id, product_id, quantity, unit_price)
VALUES
    /* Order 1 Items */
    (1, 1, 1, 799.99),
    (1, 5, 2, 29.99),
    /* Order 2 Items */
    (2, 2, 1, 1199.99),
    (2, 6, 1, 9.99),
    /* Order 3 Items */
    (3, 1, 2, 799.99),
    (3, 3, 1, 699.99),
    /* Order 4 Items */
    (4, 4, 1, 499.99);
